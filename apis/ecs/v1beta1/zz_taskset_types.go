/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ScaleObservation struct {
}

type ScaleParameters struct {

	// The unit of measure for the scale value. Default: PERCENT.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// The value, specified as a percent total of a service's desiredCount, to scale the task set. Defaults to 0 if not specified. Accepted values are numbers between 0.0 and 100.0.
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type TaskSetCapacityProviderStrategyObservation struct {
}

type TaskSetCapacityProviderStrategyParameters struct {

	// The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
	// +kubebuilder:validation:Optional
	Base *float64 `json:"base,omitempty" tf:"base,omitempty"`

	// The short name or full Amazon Resource Name (ARN) of the capacity provider.
	// +kubebuilder:validation:Required
	CapacityProvider *string `json:"capacityProvider" tf:"capacity_provider,omitempty"`

	// The relative percentage of the total number of launched tasks that should use the specified capacity provider.
	// +kubebuilder:validation:Required
	Weight *float64 `json:"weight" tf:"weight,omitempty"`
}

type TaskSetLoadBalancerObservation struct {
}

type TaskSetLoadBalancerParameters struct {

	// The name of the container to associate with the load balancer (as it appears in a container definition).
	// +kubebuilder:validation:Required
	ContainerName *string `json:"containerName" tf:"container_name,omitempty"`

	// The port on the container to associate with the load balancer. Defaults to 0 if not specified.
	// +kubebuilder:validation:Optional
	ContainerPort *float64 `json:"containerPort,omitempty" tf:"container_port,omitempty"`

	// The name of the ELB (Classic) to associate with the service.
	// +kubebuilder:validation:Optional
	LoadBalancerName *string `json:"loadBalancerName,omitempty" tf:"load_balancer_name,omitempty"`

	// The ARN of the Load Balancer target group to associate with the service.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/elbv2/v1beta1.LBTargetGroup
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	TargetGroupArn *string `json:"targetGroupArn,omitempty" tf:"target_group_arn,omitempty"`

	// Reference to a LBTargetGroup in elbv2 to populate targetGroupArn.
	// +kubebuilder:validation:Optional
	TargetGroupArnRef *v1.Reference `json:"targetGroupArnRef,omitempty" tf:"-"`

	// Selector for a LBTargetGroup in elbv2 to populate targetGroupArn.
	// +kubebuilder:validation:Optional
	TargetGroupArnSelector *v1.Selector `json:"targetGroupArnSelector,omitempty" tf:"-"`
}

type TaskSetNetworkConfigurationObservation struct {
}

type TaskSetNetworkConfigurationParameters struct {

	// Whether to assign a public IP address to the ENI (FARGATE launch type only). Valid values are true or false. Default false.
	// +kubebuilder:validation:Optional
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used. Maximum of 5.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// The subnets associated with the task or service. Maximum of 16.
	// +kubebuilder:validation:Required
	Subnets []*string `json:"subnets" tf:"subnets,omitempty"`
}

type TaskSetObservation struct {

	// The Amazon Resource Name (ARN) that identifies the task set.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// The task_set_id, service and cluster separated by commas (,).
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The stability status. This indicates whether the task set has reached a steady state.
	StabilityStatus *string `json:"stabilityStatus,omitempty" tf:"stability_status,omitempty"`

	// The status of the task set.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// The ID of the task set.
	TaskSetID *string `json:"taskSetId,omitempty" tf:"task_set_id,omitempty"`
}

type TaskSetParameters struct {

	// The capacity provider strategy to use for the service. Can be one or more.  Defined below.
	// +kubebuilder:validation:Optional
	CapacityProviderStrategy []TaskSetCapacityProviderStrategyParameters `json:"capacityProviderStrategy,omitempty" tf:"capacity_provider_strategy,omitempty"`

	// The short name or ARN of the cluster that hosts the service to create the task set in.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ecs/v1beta1.Cluster
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Cluster *string `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// Reference to a Cluster in ecs to populate cluster.
	// +kubebuilder:validation:Optional
	ClusterRef *v1.Reference `json:"clusterRef,omitempty" tf:"-"`

	// Selector for a Cluster in ecs to populate cluster.
	// +kubebuilder:validation:Optional
	ClusterSelector *v1.Selector `json:"clusterSelector,omitempty" tf:"-"`

	// The external ID associated with the task set.
	// +kubebuilder:validation:Optional
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// Whether to allow deleting the task set without waiting for scaling down to 0. You can force a task set to delete even if it's in the process of scaling a resource. This bypasses that behavior and potentially leaves resources dangling.
	// +kubebuilder:validation:Optional
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// The launch type on which to run your service. The valid values are EC2, FARGATE, and EXTERNAL. Defaults to EC2.
	// +kubebuilder:validation:Optional
	LaunchType *string `json:"launchType,omitempty" tf:"launch_type,omitempty"`

	// Details on load balancers that are used with a task set. Detailed below.
	// +kubebuilder:validation:Optional
	LoadBalancer []TaskSetLoadBalancerParameters `json:"loadBalancer,omitempty" tf:"load_balancer,omitempty"`

	// The network configuration for the service. This parameter is required for task definitions that use the awsvpc network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. Detailed below.
	// +kubebuilder:validation:Optional
	NetworkConfiguration []TaskSetNetworkConfigurationParameters `json:"networkConfiguration,omitempty" tf:"network_configuration,omitempty"`

	// The platform version on which to run your service. Only applicable for launch_type set to FARGATE. Defaults to LATEST. More information about Fargate platform versions can be found in the AWS ECS User Guide.
	// +kubebuilder:validation:Optional
	PlatformVersion *string `json:"platformVersion,omitempty" tf:"platform_version,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// A floating-point percentage of the desired number of tasks to place and keep running in the task set. Detailed below.
	// +kubebuilder:validation:Optional
	Scale []ScaleParameters `json:"scale,omitempty" tf:"scale,omitempty"`

	// The short name or ARN of the ECS service.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ecs/v1beta1.Service
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// Reference to a Service in ecs to populate service.
	// +kubebuilder:validation:Optional
	ServiceRef *v1.Reference `json:"serviceRef,omitempty" tf:"-"`

	// The service discovery registries for the service. The maximum number of service_registries blocks is 1. Detailed below.
	// +kubebuilder:validation:Optional
	ServiceRegistries []TaskSetServiceRegistriesParameters `json:"serviceRegistries,omitempty" tf:"service_registries,omitempty"`

	// Selector for a Service in ecs to populate service.
	// +kubebuilder:validation:Optional
	ServiceSelector *v1.Selector `json:"serviceSelector,omitempty" tf:"-"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The family and revision (family:revision) or full ARN of the task definition that you want to run in your service.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ecs/v1beta1.TaskDefinition
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	TaskDefinition *string `json:"taskDefinition,omitempty" tf:"task_definition,omitempty"`

	// Reference to a TaskDefinition in ecs to populate taskDefinition.
	// +kubebuilder:validation:Optional
	TaskDefinitionRef *v1.Reference `json:"taskDefinitionRef,omitempty" tf:"-"`

	// Selector for a TaskDefinition in ecs to populate taskDefinition.
	// +kubebuilder:validation:Optional
	TaskDefinitionSelector *v1.Selector `json:"taskDefinitionSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	WaitUntilStable *bool `json:"waitUntilStable,omitempty" tf:"wait_until_stable,omitempty"`

	// Wait timeout for task set to reach STEADY_STATE. Valid time units include ns, us (or µs), ms, s, m, and h. Default 10m.
	// +kubebuilder:validation:Optional
	WaitUntilStableTimeout *string `json:"waitUntilStableTimeout,omitempty" tf:"wait_until_stable_timeout,omitempty"`
}

type TaskSetServiceRegistriesObservation struct {
}

type TaskSetServiceRegistriesParameters struct {

	// The container name value, already specified in the task definition, to be used for your service discovery service.
	// +kubebuilder:validation:Optional
	ContainerName *string `json:"containerName,omitempty" tf:"container_name,omitempty"`

	// The port value, already specified in the task definition, to be used for your service discovery service.
	// +kubebuilder:validation:Optional
	ContainerPort *float64 `json:"containerPort,omitempty" tf:"container_port,omitempty"`

	// The port value used if your Service Discovery service specified an SRV record.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(aws_service_discovery_service resource). For more information, see Service.
	// +kubebuilder:validation:Required
	RegistryArn *string `json:"registryArn" tf:"registry_arn,omitempty"`
}

// TaskSetSpec defines the desired state of TaskSet
type TaskSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TaskSetParameters `json:"forProvider"`
}

// TaskSetStatus defines the observed state of TaskSet.
type TaskSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TaskSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TaskSet is the Schema for the TaskSets API. Provides an ECS task set.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type TaskSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TaskSetSpec   `json:"spec"`
	Status            TaskSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TaskSetList contains a list of TaskSets
type TaskSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TaskSet `json:"items"`
}

// Repository type metadata.
var (
	TaskSet_Kind             = "TaskSet"
	TaskSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TaskSet_Kind}.String()
	TaskSet_KindAPIVersion   = TaskSet_Kind + "." + CRDGroupVersion.String()
	TaskSet_GroupVersionKind = CRDGroupVersion.WithKind(TaskSet_Kind)
)

func init() {
	SchemeBuilder.Register(&TaskSet{}, &TaskSetList{})
}
